// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: todo.proto

/*
	Package todo is a generated protocol buffer package.

	It is generated from these files:
		todo.proto

	It has these top-level messages:
		Error
		Domain
		CreateProjectReq
		GetProjectReq
		SingleProjectRes
*/
package todo

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Error struct {
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptorTodo, []int{0} }

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (*Error) XXX_MessageName() string {
	return "todo.Error"
}

type Domain struct {
}

func (m *Domain) Reset()                    { *m = Domain{} }
func (m *Domain) String() string            { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()               {}
func (*Domain) Descriptor() ([]byte, []int) { return fileDescriptorTodo, []int{1} }

func (*Domain) XXX_MessageName() string {
	return "todo.Domain"
}

type Domain_Project struct {
	Id          string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label       string     `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Description string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CreatedOn   *time.Time `protobuf:"bytes,4,opt,name=created_on,json=createdOn,stdtime" json:"created_on,omitempty"`
}

func (m *Domain_Project) Reset()                    { *m = Domain_Project{} }
func (m *Domain_Project) String() string            { return proto.CompactTextString(m) }
func (*Domain_Project) ProtoMessage()               {}
func (*Domain_Project) Descriptor() ([]byte, []int) { return fileDescriptorTodo, []int{1, 0} }

func (m *Domain_Project) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Domain_Project) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Domain_Project) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Domain_Project) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (*Domain_Project) XXX_MessageName() string {
	return "todo.Domain.Project"
}

type Domain_Task struct {
	ProjectId   string     `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id          string     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Label       string     `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Description string     `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Done        bool       `protobuf:"varint,5,opt,name=done,proto3" json:"done,omitempty"`
	CreatedOn   *time.Time `protobuf:"bytes,6,opt,name=created_on,json=createdOn,stdtime" json:"created_on,omitempty"`
	CompletedOn *time.Time `protobuf:"bytes,7,opt,name=completed_on,json=completedOn,stdtime" json:"completed_on,omitempty"`
}

func (m *Domain_Task) Reset()                    { *m = Domain_Task{} }
func (m *Domain_Task) String() string            { return proto.CompactTextString(m) }
func (*Domain_Task) ProtoMessage()               {}
func (*Domain_Task) Descriptor() ([]byte, []int) { return fileDescriptorTodo, []int{1, 1} }

func (m *Domain_Task) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Domain_Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Domain_Task) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Domain_Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Domain_Task) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *Domain_Task) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *Domain_Task) GetCompletedOn() *time.Time {
	if m != nil {
		return m.CompletedOn
	}
	return nil
}

func (*Domain_Task) XXX_MessageName() string {
	return "todo.Domain.Task"
}

type CreateProjectReq struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label       string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *CreateProjectReq) Reset()                    { *m = CreateProjectReq{} }
func (m *CreateProjectReq) String() string            { return proto.CompactTextString(m) }
func (*CreateProjectReq) ProtoMessage()               {}
func (*CreateProjectReq) Descriptor() ([]byte, []int) { return fileDescriptorTodo, []int{2} }

func (m *CreateProjectReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateProjectReq) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *CreateProjectReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (*CreateProjectReq) XXX_MessageName() string {
	return "todo.CreateProjectReq"
}

type GetProjectReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetProjectReq) Reset()                    { *m = GetProjectReq{} }
func (m *GetProjectReq) String() string            { return proto.CompactTextString(m) }
func (*GetProjectReq) ProtoMessage()               {}
func (*GetProjectReq) Descriptor() ([]byte, []int) { return fileDescriptorTodo, []int{3} }

func (m *GetProjectReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*GetProjectReq) XXX_MessageName() string {
	return "todo.GetProjectReq"
}

type SingleProjectRes struct {
	Error  *Error          `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Entity *Domain_Project `protobuf:"bytes,2,opt,name=entity" json:"entity,omitempty"`
}

func (m *SingleProjectRes) Reset()                    { *m = SingleProjectRes{} }
func (m *SingleProjectRes) String() string            { return proto.CompactTextString(m) }
func (*SingleProjectRes) ProtoMessage()               {}
func (*SingleProjectRes) Descriptor() ([]byte, []int) { return fileDescriptorTodo, []int{4} }

func (m *SingleProjectRes) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SingleProjectRes) GetEntity() *Domain_Project {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (*SingleProjectRes) XXX_MessageName() string {
	return "todo.SingleProjectRes"
}
func init() {
	proto.RegisterType((*Error)(nil), "todo.Error")
	golang_proto.RegisterType((*Error)(nil), "todo.Error")
	proto.RegisterType((*Domain)(nil), "todo.Domain")
	golang_proto.RegisterType((*Domain)(nil), "todo.Domain")
	proto.RegisterType((*Domain_Project)(nil), "todo.Domain.Project")
	golang_proto.RegisterType((*Domain_Project)(nil), "todo.Domain.Project")
	proto.RegisterType((*Domain_Task)(nil), "todo.Domain.Task")
	golang_proto.RegisterType((*Domain_Task)(nil), "todo.Domain.Task")
	proto.RegisterType((*CreateProjectReq)(nil), "todo.CreateProjectReq")
	golang_proto.RegisterType((*CreateProjectReq)(nil), "todo.CreateProjectReq")
	proto.RegisterType((*GetProjectReq)(nil), "todo.GetProjectReq")
	golang_proto.RegisterType((*GetProjectReq)(nil), "todo.GetProjectReq")
	proto.RegisterType((*SingleProjectRes)(nil), "todo.SingleProjectRes")
	golang_proto.RegisterType((*SingleProjectRes)(nil), "todo.SingleProjectRes")
}
func (this *Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *Domain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Domain)
	if !ok {
		that2, ok := that.(Domain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Domain_Project) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Domain_Project)
	if !ok {
		that2, ok := that.(Domain_Project)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	return true
}
func (this *Domain_Task) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Domain_Task)
	if !ok {
		that2, ok := that.(Domain_Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProjectId != that1.ProjectId {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Done != that1.Done {
		return false
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.CompletedOn == nil {
		if this.CompletedOn != nil {
			return false
		}
	} else if !this.CompletedOn.Equal(*that1.CompletedOn) {
		return false
	}
	return true
}
func (this *CreateProjectReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateProjectReq)
	if !ok {
		that2, ok := that.(CreateProjectReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *GetProjectReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetProjectReq)
	if !ok {
		that2, ok := that.(GetProjectReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *SingleProjectRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleProjectRes)
	if !ok {
		that2, ok := that.(SingleProjectRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if !this.Entity.Equal(that1.Entity) {
		return false
	}
	return true
}
func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTodo(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTodo(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *Domain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Domain_Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain_Project) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTodo(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTodo(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTodo(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.CreatedOn != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTodo(dAtA, i, uint64(types.SizeOfStdTime(*m.CreatedOn)))
		n1, err := types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Domain_Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain_Task) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProjectId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTodo(dAtA, i, uint64(len(m.ProjectId)))
		i += copy(dAtA[i:], m.ProjectId)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTodo(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTodo(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTodo(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Done {
		dAtA[i] = 0x28
		i++
		if m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CreatedOn != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTodo(dAtA, i, uint64(types.SizeOfStdTime(*m.CreatedOn)))
		n2, err := types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.CompletedOn != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTodo(dAtA, i, uint64(types.SizeOfStdTime(*m.CompletedOn)))
		n3, err := types.StdTimeMarshalTo(*m.CompletedOn, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *CreateProjectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateProjectReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTodo(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTodo(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTodo(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *GetProjectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProjectReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTodo(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *SingleProjectRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleProjectRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTodo(dAtA, i, uint64(m.Error.Size()))
		n4, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Entity != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTodo(dAtA, i, uint64(m.Entity.Size()))
		n5, err := m.Entity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeVarintTodo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedError(r randyTodo, easy bool) *Error {
	this := &Error{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringTodo(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDomain(r randyTodo, easy bool) *Domain {
	this := &Domain{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDomain_Project(r randyTodo, easy bool) *Domain_Project {
	this := &Domain_Project{}
	this.Id = string(randStringTodo(r))
	this.Label = string(randStringTodo(r))
	this.Description = string(randStringTodo(r))
	if r.Intn(10) != 0 {
		this.CreatedOn = types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDomain_Task(r randyTodo, easy bool) *Domain_Task {
	this := &Domain_Task{}
	this.ProjectId = string(randStringTodo(r))
	this.Id = string(randStringTodo(r))
	this.Label = string(randStringTodo(r))
	this.Description = string(randStringTodo(r))
	this.Done = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.CreatedOn = types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CompletedOn = types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateProjectReq(r randyTodo, easy bool) *CreateProjectReq {
	this := &CreateProjectReq{}
	this.Id = string(randStringTodo(r))
	this.Label = string(randStringTodo(r))
	this.Description = string(randStringTodo(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetProjectReq(r randyTodo, easy bool) *GetProjectReq {
	this := &GetProjectReq{}
	this.Id = string(randStringTodo(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSingleProjectRes(r randyTodo, easy bool) *SingleProjectRes {
	this := &SingleProjectRes{}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Entity = NewPopulatedDomain_Project(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTodo interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTodo(r randyTodo) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTodo(r randyTodo) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneTodo(r)
	}
	return string(tmps)
}
func randUnrecognizedTodo(r randyTodo, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTodo(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTodo(dAtA []byte, r randyTodo, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTodo(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateTodo(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateTodo(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTodo(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTodo(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTodo(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTodo(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Error) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTodo(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTodo(uint64(l))
	}
	return n
}

func (m *Domain) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Domain_Project) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTodo(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTodo(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTodo(uint64(l))
	}
	if m.CreatedOn != nil {
		l = types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovTodo(uint64(l))
	}
	return n
}

func (m *Domain_Task) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProjectId)
	if l > 0 {
		n += 1 + l + sovTodo(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTodo(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTodo(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTodo(uint64(l))
	}
	if m.Done {
		n += 2
	}
	if m.CreatedOn != nil {
		l = types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovTodo(uint64(l))
	}
	if m.CompletedOn != nil {
		l = types.SizeOfStdTime(*m.CompletedOn)
		n += 1 + l + sovTodo(uint64(l))
	}
	return n
}

func (m *CreateProjectReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTodo(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTodo(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTodo(uint64(l))
	}
	return n
}

func (m *GetProjectReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTodo(uint64(l))
	}
	return n
}

func (m *SingleProjectRes) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovTodo(uint64(l))
	}
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovTodo(uint64(l))
	}
	return n
}

func sovTodo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTodo(x uint64) (n int) {
	return sovTodo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTodo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTodo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTodo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Domain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTodo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Domain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Domain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTodo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTodo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Domain_Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTodo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTodo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTodo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Domain_Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTodo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Done = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletedOn == nil {
				m.CompletedOn = new(time.Time)
			}
			if err := types.StdTimeUnmarshal(m.CompletedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTodo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTodo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateProjectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTodo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateProjectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateProjectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTodo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTodo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProjectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTodo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProjectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProjectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTodo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTodo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleProjectRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTodo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleProjectRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleProjectRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &Domain_Project{}
			}
			if err := m.Entity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTodo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTodo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTodo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTodo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTodo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTodo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTodo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTodo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTodo   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("todo.proto", fileDescriptorTodo) }
func init() { golang_proto.RegisterFile("todo.proto", fileDescriptorTodo) }

var fileDescriptorTodo = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xb1, 0x6e, 0xd4, 0x40,
	0x10, 0xd5, 0xfa, 0xec, 0x3b, 0x6e, 0x0c, 0x28, 0x5a, 0xa5, 0xb0, 0x2c, 0xe1, 0x33, 0x2e, 0xd0,
	0x15, 0xe0, 0x93, 0x0e, 0x51, 0x23, 0x25, 0x20, 0x44, 0x15, 0x64, 0x52, 0xa5, 0x89, 0x7c, 0xde,
	0xc1, 0x2c, 0xd8, 0x3b, 0xc6, 0xde, 0x14, 0x7c, 0x01, 0x2d, 0xe2, 0x27, 0xe0, 0x13, 0x28, 0x29,
	0x53, 0xf2, 0x07, 0x80, 0xf3, 0x13, 0x94, 0xe8, 0x76, 0xed, 0x04, 0x11, 0x81, 0x40, 0xa2, 0x9b,
	0x99, 0x7d, 0xf3, 0xfc, 0x9e, 0xf7, 0x2d, 0x80, 0x26, 0x41, 0x69, 0xd3, 0x92, 0x26, 0xee, 0x6e,
	0xeb, 0x70, 0x51, 0x12, 0x95, 0x15, 0xae, 0xcc, 0x6c, 0x73, 0xf2, 0x6c, 0xa5, 0x65, 0x8d, 0x9d,
	0xce, 0xeb, 0xc6, 0xc2, 0xc2, 0x3b, 0xa5, 0xd4, 0xcf, 0x4f, 0x36, 0x69, 0x41, 0xf5, 0xaa, 0xa4,
	0x92, 0x2e, 0x90, 0xdb, 0xce, 0x34, 0xa6, 0xb2, 0xf0, 0xe4, 0x1e, 0x78, 0x0f, 0xdb, 0x96, 0x5a,
	0xce, 0xc1, 0x2d, 0x48, 0x60, 0xc0, 0x62, 0xb6, 0xf4, 0x32, 0x53, 0xf3, 0x00, 0x66, 0x35, 0x76,
	0x5d, 0x5e, 0x62, 0xe0, 0xc4, 0x6c, 0x39, 0xcf, 0xc6, 0x36, 0x79, 0x3f, 0x81, 0xe9, 0x03, 0xaa,
	0x73, 0xa9, 0xc2, 0x77, 0x0c, 0x66, 0x4f, 0x5a, 0x7a, 0x81, 0x85, 0xe6, 0xd7, 0xc1, 0x91, 0xc2,
	0x50, 0xcc, 0x33, 0x47, 0x0a, 0xbe, 0x0b, 0x5e, 0x95, 0x6f, 0xb0, 0x1a, 0xd6, 0x6d, 0xc3, 0x63,
	0xf0, 0x05, 0x76, 0x45, 0x2b, 0x1b, 0x2d, 0x49, 0x05, 0x13, 0x73, 0xf6, 0xf3, 0x88, 0xdf, 0x07,
	0x28, 0x5a, 0xcc, 0x35, 0x8a, 0x63, 0x52, 0x81, 0x1b, 0xb3, 0xa5, 0xbf, 0x0e, 0x53, 0x6b, 0x3d,
	0x1d, 0x0d, 0xa5, 0x87, 0xa3, 0xf5, 0x3d, 0xf7, 0xed, 0x97, 0x05, 0xcb, 0xe6, 0xc3, 0xce, 0x81,
	0x0a, 0xdf, 0x38, 0xe0, 0x1e, 0xe6, 0xdd, 0x4b, 0x7e, 0x03, 0xa0, 0xb1, 0xe2, 0x8e, 0xcf, 0x95,
	0xcd, 0x87, 0xc9, 0x63, 0x31, 0x08, 0x76, 0x2e, 0x0b, 0x9e, 0xfc, 0x41, 0xb0, 0x7b, 0x59, 0x30,
	0x07, 0x57, 0x90, 0xc2, 0xc0, 0x8b, 0xd9, 0xf2, 0x4a, 0x66, 0xea, 0x5f, 0x4c, 0x4c, 0xff, 0xd9,
	0x04, 0xdf, 0x87, 0xab, 0x05, 0xd5, 0x4d, 0x85, 0x03, 0xc5, 0xec, 0x2f, 0x29, 0xfc, 0xf3, 0xad,
	0x03, 0x95, 0x1c, 0xc1, 0xce, 0xbe, 0x61, 0x1c, 0xee, 0x28, 0xc3, 0x57, 0xff, 0xeb, 0x9a, 0x92,
	0x05, 0x5c, 0x7b, 0x84, 0xfa, 0xf7, 0xc4, 0x49, 0x01, 0x3b, 0x4f, 0xa5, 0x2a, 0xab, 0x8b, 0x8f,
	0x77, 0xfc, 0x26, 0x78, 0xb8, 0x4d, 0x9c, 0x81, 0xf9, 0x6b, 0x3f, 0x35, 0x19, 0x37, 0x21, 0xcc,
	0xec, 0x09, 0xbf, 0x0d, 0x53, 0x54, 0x5a, 0xea, 0xd7, 0x46, 0x90, 0xbf, 0xde, 0xb5, 0x18, 0x1b,
	0xb8, 0x74, 0xe4, 0x1a, 0x30, 0x7b, 0xb7, 0xbe, 0x7f, 0x8b, 0xd8, 0x87, 0x3e, 0x62, 0x1f, 0xfb,
	0x88, 0x9d, 0xf6, 0x11, 0xfb, 0xdc, 0x47, 0xec, 0x6b, 0x1f, 0xb1, 0x4f, 0x67, 0x11, 0x3b, 0x3d,
	0x8b, 0xd8, 0x91, 0x79, 0x3a, 0x9b, 0xa9, 0xf9, 0x61, 0x77, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xc4, 0xed, 0xc6, 0x05, 0x55, 0x03, 0x00, 0x00,
}
